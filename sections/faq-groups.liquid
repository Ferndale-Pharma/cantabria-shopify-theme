{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  .faq-search-input {
    padding: 10px;
    margin-bottom: 32px;
    margin-top: 16px;
    width: 100%;
    max-width: 600px;
    font-size: 16px;
    border: 2px solid #165c7d;
    border-radius: 4px;
    box-shadow: 0 0 0 0 transparent;
    transition: box-shadow 0.2s ease;
  }

  .faq-search-input:focus, .faq-nav-select:focus {
    outline: none;
    box-shadow: 0 0 0 1px #165c7d;
  }

  .faq-nav {
    position: relative;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    white-space: nowrap;
    scroll-padding-left: 1rem;
    margin-bottom: 32px;
  }
  
  .faq-nav-list {
    display: flex;
    gap: 1rem;
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .faq-nav-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    color: #121212;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
    transition: background 0.2s ease;
    white-space: nowrap;
    border: 2px solid;
    width: 120px;
    text-align: center;
    box-shadow: 0 0 0 0 transparent;
    transition: box-shadow 0.2s ease;
  }
  
  .faq-nav-link:hover,
  .faq-nav-link:focus {
    box-shadow: 0 0 0 1px #121212;
  }
  .faq-nav-wrapper {
    margin-bottom: 64px;
  }
  
  .faq-nav-select {
      display: block;
      width: 100%;
      max-width: 400px;
      margin: 16px auto 32px auto;
      padding: 10px;
      font-size: 14px;
      border: 2px solid #121212;
      border-radius: 4px;
      color: #121212;
    }

  @media screen and (min-width: 750px) {
    .faq-nav-list {
      flex-wrap: wrap;
      justify-content: center;
    }
  }

  .faq-group {
    margin-bottom: 40px;
    max-width: 800px;
    margin: auto;
  }

  .faq-group:not(:first-of-type) {
    margin-top: 5rem;
  }

  .faq-group-title {
    margin-bottom: 3rem;
  }



  .faq-question {
    width: 100%;
    text-align: left;
    padding: 1.5rem 0.5rem;
    border: none;
    font-weight: bold;
    cursor: pointer;
    color: #121212;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #e5e7eb;
    transition: background 0.2s ease ;
  }

  .faq-question[aria-expanded="true"] {
    background: rgba(22,92,125,0.04);
    border-bottom: none;
  }
  .faq-question:hover {
    background: rgba(22,92,125,0.04);
  }

  .faq-question svg {
    transition: transform 0.2s ease;
    stroke: #165c7d;
  }
  
  .faq-chevron svg.hidden {
    display: none;
  }

  .faq-answer {
    padding: 0.5rem;
    display: none;
  }
  .faq-answer p {
    margin-bottom: 1em;
  }

  .faq-answer.hidden {
    display: none;
  }

  .faq-answer.visible {
    display: block;
  }

  .faq-answer ul {
    margin-left: 15px;
    padding-top: 0;
  }

  .faq-answer ul li {
    color: #000;
  }

  .faq-answer ul li:not(:last-of-type) {
    margin-bottom: 1rem;
  }
{%- endstyle -%}
<section class="faq-section page-width section-{{ section.id }}-padding">
  <div class="center">
    <h2>Search</h2>
    <input type="text" id="faq-search" placeholder="Search FAQs..." class="faq-search-input">
  </div>

  {% assign groups = "" %}
  {% for block in section.blocks %}
    {% assign this_group = block.settings.group_title | strip %}
    {% unless groups contains this_group %}
      {% assign groups = groups | append: this_group | append: "||" %}
    {% endunless %}
  {% endfor %}

  {% assign group_array = groups | split: "||" | uniq %}
  <p class="center">Go to the relevant FAQ section:</p>
  <div class="faq-nav-wrapper">
    <select class="faq-nav-select" aria-label="Select FAQ section">
      <option value="">Choose section...</option>
      {% for group in group_array %}
        {% if group != "" %}
          <option value="#faq-{{ group | handle }}">{{ group }}</option>
        {% endif %}
      {% endfor %}
    </select>
  </div>


  {% for group in group_array %}
    {% if group != "" %}
      <section class="faq-group" data-group="{{ group }}">
        <h2 class="faq-group-title" id="faq-{{ group | handle }}">{{ group }}</h2>

        {% for block in section.blocks %}
          {% if block.settings.group_title == group %}
            <div class="faq-item"
               data-question="{{ block.settings.title | escape }}"
               data-answer="{{ block.settings.answer | strip_html | escape }}">
          
              <h3 class="faq-question-wrapper">
                <button
                  class="faq-question"
                  aria-expanded="false"
                  aria-controls="faq-answer-{{ block.id }}"
                  id="faq-question-{{ block.id }}"
                >
                  <span class="faq-question-text">{{ block.settings.title }}</span>
                  <span class="faq-chevron" aria-hidden="true">
                    <!-- Down chevron -->
                    <svg class="chevron-down" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path d="M6 9l6 6 6-6"/>
                    </svg>
                    <!-- Up chevron -->
                    <svg class="chevron-up hidden" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path d="M6 15l6-6 6 6"/>
                    </svg>
                  </span>
                </button>
              </h3>
          
              <div
                class="faq-answer hidden"
                id="faq-answer-{{ block.id }}"
                role="region"
                aria-labelledby="faq-question-{{ block.id }}"
              >
                {{ block.settings.answer }}
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </section>
    {% endif %}
  {% endfor %}
  {% assign faq_json = "" %}
  {% for block in section.blocks %}
    {% assign question = block.settings.title | strip %}
    {% assign answer = block.settings.answer | strip_html | strip_newlines | escape %}
    {% capture faq_json %}
      {{ faq_json }},
      {
        "@type": "Question",
        "name": {{ question | json }},
        "acceptedAnswer": {
          "@type": "Answer",
          "text": {{ answer | json }}
        }
      }
    {% endcapture %}
  {% endfor %}
  
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [{{ faq_json | remove_first: "," }}]
  }
  </script>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const faqQuestions = document.querySelectorAll(".faq-question");
    const searchInput = document.getElementById("faq-search");
    const faqGroups = document.querySelectorAll(".faq-group");

    faqQuestions.forEach(button => {
      button.addEventListener("click", () => {
        const isExpanded = button.getAttribute("aria-expanded") === "true";
        const answerId = button.getAttribute("aria-controls");
        const answerEl = document.getElementById(answerId);

        // Toggle aria state
        button.setAttribute("aria-expanded", !isExpanded);
        answerEl.classList.toggle("hidden", isExpanded);
        answerEl.classList.toggle("visible", !isExpanded);

        // Toggle chevrons
        const chevronDown = button.querySelector(".chevron-down");
        const chevronUp = button.querySelector(".chevron-up");

        if (!isExpanded) {
          chevronDown.classList.add("hidden");
          chevronUp.classList.remove("hidden");
        } else {
          chevronDown.classList.remove("hidden");
          chevronUp.classList.add("hidden");
        }
      });
    });

    // Search filtering (unchanged)
    searchInput.addEventListener("input", () => {
      const query = searchInput.value.toLowerCase();

      faqGroups.forEach(group => {
        let hasVisibleItem = false;
        const items = group.querySelectorAll(".faq-item");

        items.forEach(item => {
          const question = item.dataset.question.toLowerCase();
          const answer = item.dataset.answer.toLowerCase();
          const match = question.includes(query) || answer.includes(query);

          item.style.display = match ? "block" : "none";
          if (match) hasVisibleItem = true;
        });

        group.style.display = hasVisibleItem ? "block" : "none";
      });
    });

    const faqSelect = document.querySelector(".faq-nav-select");
    if (faqSelect) {
      faqSelect.addEventListener("change", function () {
        const targetId = this.value;
        if (targetId) {
          const target = document.querySelector(targetId);
          if (target) {
            target.scrollIntoView({ behavior: "smooth", block: "start" });
          }
        }
      });
    }

  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const nav = document.querySelector(".faq-nav");
    if (nav) nav.scrollLeft = 0;
  });
</script>

{% schema %}
{
  "name": "Grouped FAQs",
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 64
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 64
    },
  ],
  "blocks": [
    {
      "type": "faq",
      "name": "FAQ Item",
      "settings": [
        {
          "type": "text",
          "id": "group_title",
          "label": "Group Title",
          "default": "Delivery"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Question",
          "default": "How long does delivery take?"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>Delivery typically takes 3–5 business days depending on your location</p>"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Grouped FAQs",
      "category": "Custom"
    }
  ]
}
{% endschema %}

